$date
	Sat Mar 13 12:54:43 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module TB_CtrlUnit $end
$var reg 1 ! clk $end
$var reg 7 " op_i [6:0] $end
$scope module c1 $end
$var wire 1 ! clk $end
$var wire 1 # data_ack_i $end
$var wire 3 $ func_i [2:0] $end
$var wire 1 % inst_ack_i $end
$var wire 7 & op_i [6:0] $end
$var wire 1 ' port_ack_i $end
$var wire 1 ( shift $end
$var wire 1 ) misc $end
$var wire 1 * mem $end
$var wire 1 + jump $end
$var wire 1 , branch $end
$var reg 4 - ALUOp_c [3:0] $end
$var reg 4 . PCoper_o [3:0] $end
$var reg 2 / RegMux_c [1:0] $end
$var reg 1 0 RegWrt_c $end
$var reg 1 1 _wait $end
$var reg 1 2 alu_immed $end
$var reg 1 3 alu_reg $end
$var reg 3 4 currentState [2:0] $end
$var reg 1 5 cyc $end
$var reg 1 6 data_cyc_o $end
$var reg 1 7 data_stb_o $end
$var reg 1 8 data_we_o $end
$var reg 1 9 inp $end
$var reg 1 : int_o $end
$var reg 1 ; inter $end
$var reg 1 < ldm $end
$var reg 3 = nextState [2:0] $end
$var reg 1 > op2_o $end
$var reg 1 ? out $end
$var reg 2 @ pop_o [1:0] $end
$var reg 1 A stb_o $end
$var reg 1 B stby $end
$var reg 1 C stm $end
$var reg 1 D weport_o $end
$scope begin decodeBlock $end
$upscope $end
$scope begin executeBlock $end
$upscope $end
$scope begin fetchBlock $end
$upscope $end
$scope begin intBlock $end
$upscope $end
$scope begin memBlock $end
$upscope $end
$scope begin writeBackBlock $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 E i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 E
xD
xC
xB
xA
bx @
x?
x>
b0 =
x<
x;
x:
x9
x8
x7
x6
x5
b0 4
x3
x2
x1
x0
bx /
bx .
bx -
0,
0+
0*
0)
0(
z'
b0 &
z%
bz $
z#
b0 "
0!
$end
#5
1!
#10
0!
1(
b110 "
b110 &
#15
1!
#20
0!
0(
1*
b10 "
b10 &
b1 E
#25
1!
#30
0!
b10 E
